package gui;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;

import api.Order;
import api.Project;
import api.Shopper;
import api.User;

import javax.swing.JButton;

/**
 * SalesReport is the report generated by administrator. It shows the status of
 * the selling product. SalesReport's information includes:
 * <ul>
 * <li>project the project
 * <li>sessionid the session id of the product
 * </ul>
 * 
 * @author Sunny
 * @version 1.0
 *
 */

public class SalesReport {

	protected JFrame frmSalesReport;
	private final ActionListener action = new ButtonHandler();
	private JTextArea textArea;
	private Project project;
	private int sessionid;

	/**
	 * Create the application of sales report.
	 */
	public SalesReport(Project p, int sessionid) {
		initialize();
		this.project = p;
		this.sessionid = sessionid;
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frmSalesReport = new JFrame();
		frmSalesReport.setTitle("Sales Report");
		frmSalesReport.setBounds(100, 100, 450, 300);
		frmSalesReport.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmSalesReport.getContentPane().setLayout(null);

		JLabel lblSalesReport = new JLabel("Sales Report");
		lblSalesReport.setBounds(27, 6, 77, 16);
		frmSalesReport.getContentPane().add(lblSalesReport);

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		scrollPane.setBounds(27, 27, 403, 182);
		frmSalesReport.getContentPane().add(scrollPane);

		textArea = new JTextArea();
		scrollPane.setViewportView(textArea);

		JButton btnGenerate = new JButton("Generate");
		btnGenerate.setBounds(292, 223, 117, 29);
		frmSalesReport.getContentPane().add(btnGenerate);
		btnGenerate.addActionListener(action);
	}

	/**
	 * The ActionListener of this button of the frame.
	 */

	private class ButtonHandler implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
			String result = "";
			double total = 0;
			if (e.getActionCommand().equals("Generate")) {
				for (User u : project.users.values()) {
					if (u instanceof api.Shopper) {
						Shopper shop = (Shopper) u;
						HashMap<Integer, Order> orders = (HashMap<Integer, Order>) shop.cusrecord.orders;
						for (Order value : orders.values()) {
							if (map.containsKey(value.prodID)) {
								int oldValue = map.get(value.prodID);
								map.replace(value.prodID, oldValue, oldValue + value.quantity);
							} else {
								map.put(value.prodID, value.quantity);
							}
						}
					}
				}

			}
			for (Integer key : map.keySet()) {
				result = result + project.back.getProduct(key).ID + " " + project.back.getProduct(key).prodName + " "
						+ map.get(key) + " " + project.back.getProduct(key).price * map.get(key) + "\n";
				total = total + project.back.getProduct(key).price * map.get(key);
			}
			textArea.setText("Sales report" + "\n" + result + "Total Amount:" + total);

		}
	}
}
